# src/inference.py
import joblib
import numpy as np
import os
from src.utils import load_data # Import load_data from your utils.py

def run_inference(model_path="model_train.pkl"):
    """
    Loads the trained model and generates predictions on the digits dataset.
    Args:
        model_path (str): The path to the trained model file (e.g., 'model_train.pkl').
    Returns:
        numpy.ndarray: The predictions generated by the model.
    Raises:
        FileNotFoundError: If the model file does not exist.
    """
    if not os.path.exists(model_path):
        raise FileNotFoundError(f"Model file not found at {model_path}. Make sure the training job ran successfully and uploaded the artifact.")

    # Load the trained model
    model = joblib.load(model_path)
    print(f"Model loaded from {model_path}")

    # Load the dataset for inference using the utility function
    X_test, y_true = load_data() # Use load_data from utils.py

    # Generate predictions
    predictions = model.predict(X_test)
    print("Predictions generated.")

    # Optional: Print some results and evaluation
    accuracy = np.mean(predictions == y_true)
    print(f"Inference Accuracy: {accuracy:.4f}")
    print(f"First 10 true labels: {y_true[:10]}")
    print(f"First 10 predictions: {predictions[:10]}")

    return predictions

if __name__ == "__main__":
    # When running locally, ensure model_train.pkl exists in the root directory
    # (e.g., by running src/train.py first from the project root)
    print("Running inference locally...")
    try:
        predictions = run_inference(model_path="model_train.pkl")
        print(f"Local inference completed. Generated {len(predictions)} predictions.")
    except FileNotFoundError as e:
        print(f"Error: {e}")
        print("Please ensure 'model_train.pkl' exists in the root directory. You can generate it by running 'python -m src.train' from the project root.")
    except Exception as e:
        print(f"An unexpected error occurred during local inference: {e}")